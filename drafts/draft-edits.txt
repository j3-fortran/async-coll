To: J3                                                     J3/25-###
Subject: US04/DIN1: Edits for Asynchronous and Team Collective Subroutines
From: Brandon Cook & Damian Rouson & Dan Bonachea & Reuben D. Budiardja
Date: 2025-October-XX
References: 25-162r2, 25-165r1, 25-166r1, 25-127r1, 25-007r1, WG5/N2249

TODO: 
-----
* Decide where/how to describe COMPLETION argument (16.6?)
* Update 18.10.4 Asynchronous communication 
* Merge in edits from 127r1, adjusted for 25-007r1


1. Background
-------------
The current Fortran 202Y work list WG5/N2249 includes asynchronous
collective subroutines as accepted work item US04, and add execution of
collective procedures on a specified team as accepted work item DIN1.

Paper 25-162r2 "US04: Requirements for Asynchronous Collective
Subroutines" presents an illustrative use case and a list of requirements.
It passed at the Oct 2025 J3 meeting #237.

Paper 25-165r1 "US04: Specifications for Asynchronous Collective
Subroutines" presents the specifications and semantics for the new
asynchronous collective subroutines feature. It passed at the Oct 2025 J3
meeting #237.

Paper 25-127r1 "DIN1: Collectives over a specified team,
req/spec/syntax/edits" (passed at Jun 2025 J3 meeting #236), adds a new
TEAM argument to the same collective subroutines impacted by work item
US04.  The functionality of these two features (US04 and DIN1) is entirely
orthogonal, but their effects must be merged in the final syntax.

Paper 25-166r2 "US04: Syntax for Asynchronous Collective Subroutines"
presents the syntax for the asynchronous collective subroutines feature,
and incorporates the syntactic changes from work item DIN1.
*** TODO: paper status

This paper presents the combined edits for work items US04 and DIN1,
and supersedes the edits passed in section 5 of 25-127r1.

2. Edits Relative to 25-007r1
=============================

-------------------------------------------------------------------------
[xv] Add to "Intrinsic procedures" the sentences:

"A new TEAM argument has been added to the collective subroutines, enabling
execution of a collective subroutine on a specified team. A new COMPLETION
argument has been added to the collective subroutines; along with the new
COMPLETE intrinsic, this enables explicitly asynchronous execution of
collective subroutines.

-------------------------------------------------------------------------
16.6 Collective subroutines:

[380:26] paragraph 1:
 replace "the current team" by "the specified team"

[380:28] paragraph 1:
 replace "its current team" by "the specified team"

[380:30+] after paragraph 1:
 Insert new paragraph reading:

"The team specified by an invocation of a collective subroutine is
 the current team if the TEAM argument is not present in that
 invocation. Otherwise, it is the team identified by the value of
 the TEAM argument. On all images participating in the same collective
 computation, the specified team shall be the same team; either the
 initial team, or the same team created by the same FORM TEAM statement
 (11.7.9)."

[380:32] paragraph 2:
  replace "of a team" with "of the specified team".

[381:2,7,13,15] paragraph 3, paragraph 4 bullet 4, paragraph 6 (twice):
 replace "the current team" by "the specified team".

[379:XX]


C3. If the optional COMPLETION argument is absent, the collective
    subroutine retains unchanged semantics as specified in Fortran 2023.

C4. If the optional COMPLETION argument is present, it shall be a
    completion variable of type COMPLETION_TYPE from the intrinsic module
    ISO_FORTRAN_ENV. It shall not be coindexed.

C5. If the optional COMPLETION argument is present, then the A argument,
    and the STAT and ERRMSG arguments if present, shall have the
    ASYNCHRONOUS attribute.

C6. When the optional COMPLETION argument is present, the completion
    variable shall have its count incremented by one before return, and
    this variable becomes "associated" with the asynchronous collective
    operation. This subroutine call is termed the "initiation" of the
    asynchronous collective operation.

C7. Implementations are encouraged to return as quickly as possible from
    the initiation call, but are permitted to stall for processor-dependent
    reasons before returning from the initiation call.

C8. After initiation, the collective operation proceeds asynchronously
    towards completion.  After the collective operation finishes its
    computation with respect to the current image, the count of the
    completion variable is decremented by one by the implementation.
    This decrement occurs regardless of whether an error condition occurs.
    This decrement is permitted to occur before the initiation call
    returns. A completion variable decrement on one image does not imply
    that other images participating in the same collective operation have
    finished their computation.

C9. An asynchronous collective operation is considered "outstanding" on a
    given image during the period between initiation and when the
    completion count of the associated completion variable next reaches
    zero.

C10. While an asynchronous collective operation is outstanding, any
     variable provided as the A, STAT or ERRMSG argument to the initiation
     call is considered a pending communicator affector (25-007r1 18.10.4)
     for an asynchronous input communication.  As such, it shall not be
     referenced, appear in a variable definition context, become undefined,
     or have its pointer association status changed.

C11. A completion variable shall not become undefined while its completion
     count is non-zero.

C12. It is permitted for multiple outstanding asynchronous collective
    operations to become associated with the same completion variable.
    Implementations shall support association of up to no less than 128
    outstanding asynchronous collective operations with any given
    completion variable.

C13. If the COMPLETION argument is present in a reference to a collective
    subroutine on one image, it shall be present on all the corresponding
    references.


-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_BROADCAST with the following:

"
CO_BROADCAST (A, SOURCE_IMAGE [, STAT, ERRMSG]) or \
    C    Broadcast value to images.
CO_BROADCAST (A, SOURCE_IMAGE, COMPLETION [, STAT, ERRMSG]) or
CO_BROADCAST (A, SOURCE_IMAGE, TEAM [, STAT, ERRMSG]) or
CO_BROADCAST (A, SOURCE_IMAGE, TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_MAX with the following:

"
CO_MAX (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Compute maximum value across images.
CO_MAX (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_MAX (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_MAX (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_MIN with the following:

"
CO_MIN (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Compute minimum value across images.
CO_MIN (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_MIN (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_MIN (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_REDUCE with the following:

"
CO_REDUCE (A, OPERATION [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Generalized reduction across images.
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], COMPLETION
                                          [, STAT, ERRMSG]) or
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM
                                          [, STAT, ERRMSG]) or
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM, COMPLETION
                                          [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_ with the following:

"
CO_SUM (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C   Compute sum across images.
CO_SUM (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_SUM (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_SUM (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
after the entry for COMMAND_ARGUMENT_COUNT add a new entry:

"
COMPLETE( COMPLETION [, FINISHED ])  S  Synchronize a completion variable.
"

-------------------------------------------------------------------------
16.9.54 CO_BROADCAST:

[408:29] Replace the heading with:

"CO_BROADCAST (A, SOURCE_IMAGE [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, COMPLETION [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, TEAM [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, TEAM, COMPLETION [, STAT, ERRMSG])"

[408:35-36] in the description of A:
 replace "the current team" by "the specified team"

[409:4] in the description of SOURCE_IMAGE:
 replace "the current team" by "the specified team"

[409:6+] before the description of STAT in paragraph 3, insert:

"TEAM shall be a scalar of type TEAM_TYPE from the intrinsic module
      ISO_FORTRAN_ENV. It is an INTENT (IN) argument.

 COMPLETION shall be a scalar of type COMPLETION_TYPE from the intrinsic
            module ISO_FORTRAN_ENV. It is an INTENT (INOUT) argument."

[409:9] replace paragraph 4 with:

"The semantics of TEAM, COMPLETION, STAT and ERRMSG are described in 16.6."

-------------------------------------------------------------------------
16.9.55 CO_MAX:

[409:13] Replace the heading with:

"CO_MAX (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"

[409:27] in the description of RESULT_IMAGE:
 replace "the current team" by "the specified team"

[409:28+] before the description of STAT in paragraph 3, insert:

"TEAM shall be a scalar of type TEAM_TYPE from the intrinsic module
      ISO_FORTRAN_ENV. It is an INTENT (IN) argument.

 COMPLETION shall be a scalar of type COMPLETION_TYPE from the intrinsic
            module ISO_FORTRAN_ENV. It is an INTENT (INOUT) argument."

[409:31] replace paragraph 4 with:

"The semantics of TEAM, COMPLETION, STAT and ERRMSG are described in 16.6."

-------------------------------------------------------------------------
16.9.56 CO_MIN:

[409:36] Replace the heading with:

"CO_MIN (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"

[410:11] in the description of RESULT_IMAGE:
 replace "the current team" by "the specified team"

[410:12+] before the description of STAT in paragraph 3, insert:

"TEAM shall be a scalar of type TEAM_TYPE from the intrinsic module
      ISO_FORTRAN_ENV. It is an INTENT (IN) argument.

 COMPLETION shall be a scalar of type COMPLETION_TYPE from the intrinsic
            module ISO_FORTRAN_ENV. It is an INTENT (INOUT) argument."

[410:15] replace paragraph 4 with:

"The semantics of TEAM, COMPLETION, STAT and ERRMSG are described in 16.6."

-------------------------------------------------------------------------
16.9.56 CO_REDUCE:

[410:19] Replace the heading with:

"CO_REDUCE (A, OPERATION [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], COMPLETION \
                                          [, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM \
                                          [, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM, COMPLETION \
                                          [, STAT, ERRMSG])"

[411:3] in the description of RESULT_IMAGE:
 replace "the current team" by "the specified team"

[411:4+] before the description of STAT in paragraph 3, insert:

"TEAM shall be a scalar of type TEAM_TYPE from the intrinsic module
      ISO_FORTRAN_ENV. It is an INTENT (IN) argument.

 COMPLETION shall be a scalar of type COMPLETION_TYPE from the intrinsic
            module ISO_FORTRAN_ENV. It is an INTENT (INOUT) argument."

[411:7] replace paragraph 4 with:

"The semantics of TEAM, COMPLETION, STAT and ERRMSG are described in 16.6."

-------------------------------------------------------------------------
16.9.56 CO_SUM:

[411:20] Replace the heading with:

"CO_SUM (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"

[411:35] in the description of RESULT_IMAGE:
 replace "the current team" by "the specified team"

[411:36+] before the description of STAT in paragraph 3, insert:

"TEAM shall be a scalar of type TEAM_TYPE from the intrinsic module
      ISO_FORTRAN_ENV. It is an INTENT (IN) argument.

 COMPLETION shall be a scalar of type COMPLETION_TYPE from the intrinsic
            module ISO_FORTRAN_ENV. It is an INTENT (INOUT) argument."

[411:39] replace paragraph 4 with:

"The semantics of TEAM, COMPLETION, STAT and ERRMSG are described in 16.6."

-------------------------------------------------------------------------
[412:14+] In 16.9 Specifications of the standard intrinsic procedures,
after the specification of COMMAND_ARGUMENT_COUNT, add:

16.9.?? COMPLETE( COMPLETION [, FINISHED ])

<<Description.>> Synchronize a completion variable.

<<Class.>> Subroutine.

<<Arguments.>>

COMPLETION shall be a completion variable (16.10.2.??).
           It shall not be coindexed. It is an INTENT (INOUT) argument.

FINISHED (optional) when present, shall be a variable of logical type with
                    the same shape as COMPLETION. It is an INTENT (OUT)
                    argument.

** TODO: Description

<<Example.>>

** TODO: Example

------------------------------------------------------------------------
[493:14] Insert a new section in 16.10.2 before CURRENT_TEAM:

16.10.2.?? COMPLETION_TYPE

COMPLETION_TYPE is a derived type with private components. It is an
extensible type with no type parameters. Each nonallocatable component is
fully default-initialized.

A scalar variable of type COMPLETION_TYPE is a completion variable.
A completion variable represents an abstraction for the completion status
    of one or more asynchronous collective operations.


T5. The value of a completion variable includes its completion count,
    which is a count of outstanding asynchronous collective operations
    associated with this variable.

T6. The initial value of the completion count of a completion variable
    is zero, representing that there are no outstanding asynchronous
    collective operations associated with this variable.

T7. A completion variable shall not appear in a variable definition context
    except as an allocate-object, or as an actual argument in a reference
    to a procedure with an explicit interface if the corresponding dummy
    argument has INTENT (INOUT).

C??? A variable with a nonpointer subobject of type COMPLETION_TYPE shall
     not appear in a variable definition context except as an
     allocate-object in an ALLOCATE statement without a SOURCE= specifier,
     as an allocate-object in a DEALLOCATE statement, or as an actual
     argument in a reference to a procedure with an explicit interface if
     the corresponding dummy argument has INTENT (INOUT).


------------------------------------------------------------------------
------------------------------------------------------------------------
===END===

=====================
OLD STUFF
======================

2. Completion Type Syntax
-------------------------

T1. New type COMPLETION_TYPE is added to the ISO_FORTRAN_ENV intrinsic
    module.

3. Asynchronous Collective Initiation Syntax
--------------------------------------------

Paper 25-127r1 "DIN1: Collectives over a specified team,
req/spec/syntax/edits" (passed at Jun 2025 J3 meeting #236), adds a new
TEAM argument to the same collective subroutines impacted by work item
US04.  The functionality of these two features (US04 and DIN1) is entirely
orthogonal, but their effects must be merged in the final syntax.

For clarity of direction, this paper incorporates the syntactic changes
from work item DIN1, and supersedes the syntax presented in section 4 of
25-127r1.  A forthcoming edit paper is also expected to supersede the
edits passed in section 5 of 25-127r1.

Each of the collective subroutines are expanded into four forms,
corresponding to the appearance or non-appearance of a COMPLETION argument
of type COMPLETION_TYPE and a TEAM argument of type TEAM_TYPE (also from
intrinsic module ISO_FORTRAN_ENV).

The full syntax for all forms of the updated collective subroutines is as
follows. The first form of each intrinsic corresponds to the unmodified
current intrinsic interface.

