To: J3                                                     J3/25-###
Subject: US04/DIN1: Edits for Asynchronous and Team Collective Subroutines
From: Brandon Cook & Damian Rouson & Dan Bonachea & Reuben D. Budiardja
Date: 2025-October-XX
References: 25-162r2, 25-165r1, 25-166r1, 25-127r1, 25-007r1, WG5/N2249

TODO: 
-----
* Decide where/how to describe COMPLETION argument (16.6?)
* Update 18.10.4 Asynchronous communication 
* Merge in edits from 127r1, adjusted for 25-007r1


1. Background
-------------
The current Fortran 202Y work list WG5/N2249 includes asynchronous
collective subroutines as accepted work item US04, and add execution of
collective procedures on a specified team as accepted work item DIN1.

Paper 25-162r2 "US04: Requirements for Asynchronous Collective
Subroutines" presents an illustrative use case and a list of requirements.
It passed at the Oct 2025 J3 meeting #237.

Paper 25-165r1 "US04: Specifications for Asynchronous Collective
Subroutines" presents the specifications and semantics for the new
asynchronous collective subroutines feature. It passed at the Oct 2025 J3
meeting #237.

Paper 25-127r1 "DIN1: Collectives over a specified team,
req/spec/syntax/edits" (passed at Jun 2025 J3 meeting #236), adds a new
TEAM argument to the same collective subroutines impacted by work item
US04.  The functionality of these two features (US04 and DIN1) is entirely
orthogonal, but their effects must be merged in the final syntax.

Paper 25-166r2 "US04: Syntax for Asynchronous Collective Subroutines"
presents the syntax for the asynchronous collective subroutines feature,
and incorporates the syntactic changes from work item DIN1.
*** TODO: paper status

This paper presents the combined edits for work items US04 and DIN1,
and supersedes the edits passed in section 5 of 25-127r1.

2. Edits Relative to 25-007r1
=============================

-------------------------------------------------------------------------
[xv] Add to "Intrinsic procedures" the sentences:

"A new TEAM argument has been added to the collective subroutines, enabling
execution of a collective subroutine on a specified team. A new COMPLETION
argument has been added to the collective subroutines; along with the new
COMPLETE intrinsic, this enables explicitly asynchronous execution of
collective subroutines.

-------------------------------------------------------------------------
16.6 Collective subroutines:

[379:XX]

-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_BROADCAST with the following:

"
CO_BROADCAST (A, SOURCE_IMAGE [, STAT, ERRMSG]) or \
    C    Broadcast value to images.
CO_BROADCAST (A, SOURCE_IMAGE, COMPLETION [, STAT, ERRMSG]) or
CO_BROADCAST (A, SOURCE_IMAGE, TEAM [, STAT, ERRMSG]) or
CO_BROADCAST (A, SOURCE_IMAGE, TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_MAX with the following:

"
CO_MAX (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Compute maximum value across images.
CO_MAX (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_MAX (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_MAX (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_MIN with the following:

"
CO_MIN (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Compute minimum value across images.
CO_MIN (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_MIN (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_MIN (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_REDUCE with the following:

"
CO_REDUCE (A, OPERATION [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C    Generalized reduction across images.
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], COMPLETION
                                          [, STAT, ERRMSG]) or
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM
                                          [, STAT, ERRMSG]) or
CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM, COMPLETION
                                          [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
replace the entry for CO_ with the following:

"
CO_SUM (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
    C   Compute sum across images.
CO_SUM (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or
CO_SUM (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or
CO_SUM (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])
"

-------------------------------------------------------------------------
[383] In 16.7 Standard generic intrinsic procedures, Table 16.1,
after the entry for COMMAND_ARGUMENT_COUNT add a new entry:

"
COMPLETE( COMPLETION [, FINISHED ])  S  Synchronize a completion variable.
"

-------------------------------------------------------------------------
16.9.54 CO_BROADCAST:

[408:29] Replace the heading with:

"CO_BROADCAST (A, SOURCE_IMAGE [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, COMPLETION [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, TEAM [, STAT, ERRMSG]) or \
 CO_BROADCAST (A, SOURCE_IMAGE, TEAM, COMPLETION [, STAT, ERRMSG])"

-------------------------------------------------------------------------
16.9.55 CO_MAX:

[409:13] Replace the heading with:

"CO_MAX (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_MAX (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"


-------------------------------------------------------------------------
16.9.56 CO_MIN:

[409:36] Replace the heading with:

"CO_MIN (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_MIN (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"

-------------------------------------------------------------------------
16.9.56 CO_REDUCE:

[410:19] Replace the heading with:

"CO_REDUCE (A, OPERATION [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], COMPLETION \
                                          [, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM \
                                          [, STAT, ERRMSG]) or \
 CO_REDUCE (A, OPERATION [, RESULT_IMAGE], TEAM, COMPLETION \
                                          [, STAT, ERRMSG])"

-------------------------------------------------------------------------
16.9.56 CO_SUM:

[411:20] Replace the heading with:

"CO_SUM (A [, RESULT_IMAGE, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], COMPLETION [, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], TEAM [, STAT, ERRMSG]) or \
 CO_SUM (A [, RESULT_IMAGE], TEAM, COMPLETION [, STAT, ERRMSG])"

-------------------------------------------------------------------------
[412:14+] In 16.9 Specifications of the standard intrinsic procedures,
after the specification of COMMAND_ARGUMENT_COUNT, add:

16.9.?? COMPLETE( COMPLETION [, FINISHED ])

<<Description.>> Synchronize a completion variable.

<<Class.>> Subroutine.

<<Arguments.>>

COMPLETION shall be a variable of type COMPLETION_TYPE from the intrinsic
           module ISO_FORTRAN_ENV. It shall not be coindexed. It is an
           INTENT(INOUT) argument.

FINISHED (optional) when present, shall be a variable of logical type with
                    the same shape as COMPLETION. It is an INTENT(OUT)
                    argument.

** TODO: Description

<<Example.>>

** TODO: Example

------------------------------------------------------------------------
[493:14] Insert a new section in 16.10.2 before CURRENT_TEAM:

16.10.2.?? COMPLETION_TYPE

COMPLETION_TYPE is a derived type with private components. It is an
extensible type with no type parameters. Each nonallocatable component is
fully default-initialized.

A scalar variable of type COMPLETION_TYPE is a completion variable.
A completion variable represents an abstraction for the completion status
    of one or more asynchronous collective operations.


T5. The value of a completion variable includes its completion count,
    which is a count of outstanding asynchronous collective operations
    associated with this variable.

T6. The initial value of the completion count of a completion variable
    is zero, representing that there are no outstanding asynchronous
    collective operations associated with this variable.

T7. A completion variable shall not appear in a variable definition context
    except as an allocate-object, or as an actual argument in a reference
    to a procedure with an explicit interface if the corresponding dummy
    argument has INTENT (INOUT).

C??? A variable with a nonpointer subobject of type COMPLETION_TYPE shall
     not appear in a variable definition context except as an
     allocate-object in an ALLOCATE statement without a SOURCE= specifier,
     as an allocate-object in a DEALLOCATE statement, or as an actual
     argument in a reference to a procedure with an explicit interface if
     the corresponding dummy argument has INTENT (INOUT).


------------------------------------------------------------------------
------------------------------------------------------------------------
===END===

=====================
OLD STUFF
======================

2. Completion Type Syntax
-------------------------

T1. New type COMPLETION_TYPE is added to the ISO_FORTRAN_ENV intrinsic
    module.

3. Asynchronous Collective Initiation Syntax
--------------------------------------------

Paper 25-127r1 "DIN1: Collectives over a specified team,
req/spec/syntax/edits" (passed at Jun 2025 J3 meeting #236), adds a new
TEAM argument to the same collective subroutines impacted by work item
US04.  The functionality of these two features (US04 and DIN1) is entirely
orthogonal, but their effects must be merged in the final syntax.

For clarity of direction, this paper incorporates the syntactic changes
from work item DIN1, and supersedes the syntax presented in section 4 of
25-127r1.  A forthcoming edit paper is also expected to supersede the
edits passed in section 5 of 25-127r1.

Each of the collective subroutines are expanded into four forms,
corresponding to the appearance or non-appearance of a COMPLETION argument
of type COMPLETION_TYPE and a TEAM argument of type TEAM_TYPE (also from
intrinsic module ISO_FORTRAN_ENV).

The full syntax for all forms of the updated collective subroutines is as
follows. The first form of each intrinsic corresponds to the unmodified
current intrinsic interface.

